/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package A2_pool_game;

import A2_pool_game.model.builder.Ball.*;
import A2_pool_game.model.builder.Table.*;
import javafx.application.Application;
import javafx.stage.Stage;

import A2_pool_game.model.factory.*;
import A2_pool_game.model.factory.IReader;
import A2_pool_game.view.Game_view;
import A2_pool_game.model.IGame_logic;
import A2_pool_game.model.Game_logic;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

import org.json.simple.JSONObject;

public class POOL_GAME extends Application{

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        Map<String, String> params = getParameters().getNamed();

        final double frameDurationMilli = 17;
        ConfigReader configReader = new ConfigReader();
        JSONObject entireJsonObject = configReader.parse("config.json"); 

        
        // factory design pattern 
        IConfigReaderFactory configReaderFactory = new TableReaderFactory(); // concrete factory
        IReader reader = configReaderFactory.makeReader(); // concrete product
        
        List<HashMap<String, Object>> tables = reader.parse(entireJsonObject);


        configReaderFactory = new BallReaderFactory();
        reader = configReaderFactory.makeReader();
        List<HashMap<String, Object>> balls = reader.parse(entireJsonObject);

        // builder design pattern
        IBall_director IBallDirector = new Ball_director();
        List<Ball> ballObjects = new ArrayList<Ball>();
        CueBall cueBall = new CueBall();

        boolean cueBallExist = false;
        for (int i = 0; i < balls.size(); i ++) {
            // save all the properties of the ball to a variable
            HashMap<String, Object> ball = balls.get(i);
            String colour = (String) ball.get("colour");

            Double positionX = (Double) ball.get("positionX");
            Double positionY = (Double) ball.get("positionY");
            Double velocityX = (Double) ball.get("velocityX");
            Double velocityY = (Double) ball.get("velocityY");
            Double mass = (Double) ball.get("mass");

            IBall_builder ballBuilder;
            if (colour.equals("white")) {
                ballBuilder = new WhiteBall_builder(colour, positionX, positionY, velocityX, velocityY, mass);
                cueBallExist = true;

                IBallDirector.callBuilder(ballBuilder);
                IBallDirector.construct();
                Ball ballObject = (CueBall) ballBuilder.getBall();

                cueBall = (CueBall) ballObject;
                ballObjects.add(ballObject);

            } else {
                ballBuilder = new Ball_builder(colour, positionX, positionY, velocityX, velocityY, mass);
                IBallDirector.callBuilder(ballBuilder);
                IBallDirector.construct();
                Ball ballObject = (Ball) ballBuilder.getBall();
                ballObjects.add(ballObject);
            }

        }

        if (!cueBallExist) {
            System.out.println("Cue ball does not exist");
            System.exit(1);
        }

        ITable_director ITableDirector = new Table_director();
        HashMap<String, Object> table = tables.get(0);
        // get colour, tableX, tableY, friction
        String colour = (String) table.get("colour");
        Long tableX = (Long) table.get("tableX");
        Long tableY = (Long) table.get("tableY");
        Double friction = (Double) table.get("friction");

        ITable_builder ib = new Table_builder(colour, tableX, tableY, friction);
        ITableDirector.callBuilder(ib);
        ITableDirector.construct();
        Table tableObject = (Table) ib.getTable();

        IGame_logic pool_game = new Game_logic(tableObject, ballObjects, cueBall);
        Game_view window = new Game_view(pool_game, tableObject.getTableX(), tableObject.getTableY(), frameDurationMilli);
        window.run();

        // show stage
        primaryStage.setTitle("Pool Game");
        primaryStage.setScene(window.getScene());
        primaryStage.setResizable(false);
        primaryStage.show();
    }
        
}
